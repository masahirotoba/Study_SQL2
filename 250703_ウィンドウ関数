# テーブルを作成
shop=# SELECT * FROM salesicecream;
 shop_id | sale_date  | sales_amt
---------+------------+-----------
 A       | 2024-06-01 |     67800
 A       | 2024-06-02 |     87000
 A       | 2024-06-05 |     11300
 A       | 2024-06-10 |      9800
 A       | 2024-06-15 |      9800
 B       | 2024-06-02 |    178000
 B       | 2024-06-15 |     18800
 B       | 2024-06-17 |     19850
 B       | 2024-06-20 |     23800
 B       | 2024-06-21 |     18800
 C       | 2024-06-01 |     12500
(11 行)

# 店舗毎の累計の売上を求める
shop=# SELECT shop_id, sale_date, sales_amt,
shop-# SUM(sales_amt) OVER (PARTITION BY shop_id ORDER BY sale_date) FROM salesicecream;
 shop_id | sale_date  | sales_amt |  sum
---------+------------+-----------+--------
 A       | 2024-06-01 |     67800 |  67800
 A       | 2024-06-02 |     87000 | 154800
 A       | 2024-06-05 |     11300 | 166100
 A       | 2024-06-10 |      9800 | 175900
 A       | 2024-06-15 |      9800 | 185700
 B       | 2024-06-02 |    178000 | 178000
 B       | 2024-06-15 |     18800 | 196800
 B       | 2024-06-17 |     19850 | 216650
 B       | 2024-06-20 |     23800 | 240450
 B       | 2024-06-21 |     18800 | 259250
 C       | 2024-06-01 |     12500 |  12500
(11 行)

# ウィンドウ関数の復習（RANK関数で並び替え）
shop=# SELECT shohin_mei, shohin_bunrui, hanbai_tanka,
shop-# RANK() OVER (PARTITION BY shohin_bunrui ORDER BY hanbai_tanka) FROM shohin;
   shohin_mei   | shohin_bunrui | hanbai_tanka | rank
----------------+---------------+--------------+------
 フォーク       | キッチン用品  |          500 |    1
 おろしがね     | キッチン用品  |          880 |    2
 包丁           | キッチン用品  |         3000 |    3
 圧力鍋         | キッチン用品  |         6800 |    4
 Tシャツ        | 衣服          |         1000 |    1
 カッターシャツ | 衣服          |         4000 |    2
 ボールペン     | 事務用品      |          100 |    1
 穴あけパンチ   | 事務用品      |          500 |    2
(8 行)

# PARTITION BYがないとき（全体でのランキングに）
shop=# SELECT shohin_mei, shohin_bunrui, hanbai_tanka,
shop-# RANK() OVER (ORDER BY hanbai_tanka) FROM shohin;
   shohin_mei   | shohin_bunrui | hanbai_tanka | rank
----------------+---------------+--------------+------
 ボールペン     | 事務用品      |          100 |    1
 フォーク       | キッチン用品  |          500 |    2
 穴あけパンチ   | 事務用品      |          500 |    2
 おろしがね     | キッチン用品  |          880 |    4
 Tシャツ        | 衣服          |         1000 |    5
 包丁           | キッチン用品  |         3000 |    6
 カッターシャツ | 衣服          |         4000 |    7
 圧力鍋         | キッチン用品  |         6800 |    8
(8 行)

# ORDER BYがないとき（並び順とランク付けの基準がないから）
shop=# SELECT shohin_mei, shohin_bunrui, hanbai_tanka,
shop-# RANK() OVER (PARTITION BY shohin_bunrui) FROM shohin;
   shohin_mei   | shohin_bunrui | hanbai_tanka | rank
----------------+---------------+--------------+------
 圧力鍋         | キッチン用品  |         6800 |    1
 フォーク       | キッチン用品  |          500 |    1
 おろしがね     | キッチン用品  |          880 |    1
 包丁           | キッチン用品  |         3000 |    1
 Tシャツ        | 衣服          |         1000 |    1
 カッターシャツ | 衣服          |         4000 |    1
 穴あけパンチ   | 事務用品      |          500 |    1
 ボールペン     | 事務用品      |          100 |    1
(8 行)

# OVERにはどんな役割がありますか？
OVER()は「どの範囲で計算するか」を指定
元のデータの行数を保持しながら集計値を付加
GROUP BYとは異なり、詳細データと集計値を同時に表示可能

OVERはウィンドウ関数の必須キーワード
「この関数はウィンドウ関数です」という宣言の役割
PARTITION BYやORDER BYはOVER句の中に書く必要がある

# 集約関数もウィンドウ関数として使える
shop=# SELECT shohin_id, shohin_mei, hanbai_tanka,
shop-# SUM(hanbai_tanka) OVER (ORDER BY shohin_id) FROM shohin;
 shohin_id |   shohin_mei   | hanbai_tanka |  sum
-----------+----------------+--------------+-------
 0001      | Tシャツ        |         1000 |  1000
 0002      | 穴あけパンチ   |          500 |  1500
 0003      | カッターシャツ |         4000 |  5500
 0004      | 包丁           |         3000 |  8500
 0005      | 圧力鍋         |         6800 | 15300
 0006      | フォーク       |          500 | 15800
 0007      | おろしがね     |          880 | 16680
 0008      | ボールペン     |          100 | 16780
(8 行)

# 移動平均を求める
shop=# SELECT shohin_id, shohin_mei, hanbai_tanka,
shop-# AVG(hanbai_tanka) OVER (ORDER BY shohin_id ROWS 2 PRECEDING) FROM shohin;
 shohin_id |   shohin_mei   | hanbai_tanka |          avg
-----------+----------------+--------------+-----------------------
 0001      | Tシャツ        |         1000 | 1000.0000000000000000
 0002      | 穴あけパンチ   |          500 |  750.0000000000000000
 0003      | カッターシャツ |         4000 | 1833.3333333333333333
 0004      | 包丁           |         3000 | 2500.0000000000000000
 0005      | 圧力鍋         |         6800 | 4600.0000000000000000
 0006      | フォーク       |          500 | 3433.3333333333333333
 0007      | おろしがね     |          880 | 2726.6666666666666667
 0008      | ボールペン     |          100 |  493.3333333333333333
(8 行)

# 通常の使い方
shop=# SELECT shohin_id, shohin_mei, hanbai_tanka,
shop-# RANK() OVER (ORDER BY hanbai_tanka) FROM shohin;
 shohin_id |   shohin_mei   | hanbai_tanka | rank
-----------+----------------+--------------+------
 0008      | ボールペン     |          100 |    1
 0006      | フォーク       |          500 |    2
 0002      | 穴あけパンチ   |          500 |    2
 0007      | おろしがね     |          880 |    4
 0001      | Tシャツ        |         1000 |    5
 0004      | 包丁           |         3000 |    6
 0003      | カッターシャツ |         4000 |    7
 0005      | 圧力鍋         |         6800 |    8
(8 行)

# 累計売上を求める
shop=# SELECT shop_id, sale_date, sales_amt,
shop-# SUM(sales_amt) OVER (PARTITION BY shop_id ORDER BY sale_date) FROM salesicecream;
 shop_id | sale_date  | sales_amt |  sum
---------+------------+-----------+--------
 A       | 2024-06-01 |     67800 |  67800
 A       | 2024-06-02 |     87000 | 154800
 A       | 2024-06-05 |     11300 | 166100
 A       | 2024-06-10 |      9800 | 175900
 A       | 2024-06-15 |      9800 | 185700
 B       | 2024-06-02 |    178000 | 178000
 B       | 2024-06-15 |     18800 | 196800
 B       | 2024-06-17 |     19850 | 216650
 B       | 2024-06-20 |     23800 | 240450
 B       | 2024-06-21 |     18800 | 259250
 C       | 2024-06-01 |     12500 |  12500
(11 行)

# 本来の正式な書き方（これでも同じ結果に）
shop=# SELECT shop_id, sale_date, sales_amt,
shop-# SUM(sales_amt) OVER (PARTITION BY shop_id ORDER BY sale_date) FROM salesicecream
shop-# WINDOW CUMLATIVE AS (PARTITION BY shop_id ORDER BY sale_date);
 shop_id | sale_date  | sales_amt |  sum
---------+------------+-----------+--------
 A       | 2024-06-01 |     67800 |  67800
 A       | 2024-06-02 |     87000 | 154800
 A       | 2024-06-05 |     11300 | 166100
 A       | 2024-06-10 |      9800 | 175900
 A       | 2024-06-15 |      9800 | 185700
 B       | 2024-06-02 |    178000 | 178000
 B       | 2024-06-15 |     18800 | 196800
 B       | 2024-06-17 |     19850 | 216650
 B       | 2024-06-20 |     23800 | 240450
 B       | 2024-06-21 |     18800 | 259250
 C       | 2024-06-01 |     12500 |  12500
(11 行)

# 移動平均を出す
shop=# SELECT shop_id, sale_date, sales_amt,
shop-# AVG(sales_amt) OVER (PARTITION BY shop_id ORDER BY sale_date ROWS 2 PRECEDING) FROM salesicecream;
 shop_id | sale_date  | sales_amt |          avg
---------+------------+-----------+------------------------
 A       | 2024-06-01 |     67800 |     67800.000000000000
 A       | 2024-06-02 |     87000 |     77400.000000000000
 A       | 2024-06-05 |     11300 |     55366.666666666667
 A       | 2024-06-10 |      9800 |     36033.333333333333
 A       | 2024-06-15 |      9800 | 10300.0000000000000000
 B       | 2024-06-02 |    178000 |    178000.000000000000
 B       | 2024-06-15 |     18800 |     98400.000000000000
 B       | 2024-06-17 |     19850 |     72216.666666666667
 B       | 2024-06-20 |     23800 |     20816.666666666667
 B       | 2024-06-21 |     18800 |     20816.666666666667
 C       | 2024-06-01 |     12500 | 12500.0000000000000000
(11 行)

# これだと累積の平均を計算してしまう
shop=# SELECT shop_id, sale_date, sales_amt,
shop-# AVG(sales_amt) OVER (PARTITION BY shop_id ORDER BY sale_date) FROM salesicecream;
 shop_id | sale_date  | sales_amt |          avg
---------+------------+-----------+------------------------
 A       | 2024-06-01 |     67800 |     67800.000000000000
 A       | 2024-06-02 |     87000 |     77400.000000000000
 A       | 2024-06-05 |     11300 |     55366.666666666667
 A       | 2024-06-10 |      9800 |     43975.000000000000
 A       | 2024-06-15 |      9800 |     37140.000000000000
 B       | 2024-06-02 |    178000 |    178000.000000000000
 B       | 2024-06-15 |     18800 |     98400.000000000000
 B       | 2024-06-17 |     19850 |     72216.666666666667
 B       | 2024-06-20 |     23800 |     60112.500000000000
 B       | 2024-06-21 |     18800 |     51850.000000000000
 C       | 2024-06-01 |     12500 | 12500.0000000000000000
(11 行)

# ROUNDで丸くした
shop=# SELECT shop_id, sale_date, sales_amt,
shop-# ROUND(AVG(sales_amt) OVER (PARTITION BY shop_id ORDER BY sale_date),0) FROM salesicecream;
 shop_id | sale_date  | sales_amt | round
---------+------------+-----------+--------
 A       | 2024-06-01 |     67800 |  67800
 A       | 2024-06-02 |     87000 |  77400
 A       | 2024-06-05 |     11300 |  55367
 A       | 2024-06-10 |      9800 |  43975
 A       | 2024-06-15 |      9800 |  37140
 B       | 2024-06-02 |    178000 | 178000
 B       | 2024-06-15 |     18800 |  98400
 B       | 2024-06-17 |     19850 |  72217
 B       | 2024-06-20 |     23800 |  60113
 B       | 2024-06-21 |     18800 |  51850
 C       | 2024-06-01 |     12500 |  12500
(11 行)

# 移動平均の算出
shop=# SELECT shop_id, sale_date, sales_amt,
shop-# AVG(sales_amt) OVER (PARTITION BY shop_id ORDER BY sale_date ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) FROM salesicecream;
 shop_id | sale_date  | sales_amt |          avg
---------+------------+-----------+------------------------
 A       | 2024-06-01 |     67800 |     67800.000000000000
 A       | 2024-06-02 |     87000 |     77400.000000000000
 A       | 2024-06-05 |     11300 |     55366.666666666667
 A       | 2024-06-10 |      9800 |     36033.333333333333
 A       | 2024-06-15 |      9800 | 10300.0000000000000000
 B       | 2024-06-02 |    178000 |    178000.000000000000
 B       | 2024-06-15 |     18800 |     98400.000000000000
 B       | 2024-06-17 |     19850 |     72216.666666666667
 B       | 2024-06-20 |     23800 |     20816.666666666667
 B       | 2024-06-21 |     18800 |     20816.666666666667
 C       | 2024-06-01 |     12500 | 12500.0000000000000000
(11 行)

# 
