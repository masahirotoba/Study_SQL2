# 購入明細テーブルを作る
shop=# SELECT * FROM receipts;
 customer_id | seq | price
-------------+-----+-------
 A           |   1 |   500
 A           |   2 |  1000
 A           |   3 |   700
 B           |   5 |   100
 B           |   6 |  5000
 B           |   7 |   300
 B           |   9 |   200
 B           |  12 |  1000
 C           |  10 |   600
 C           |  20 |   100
 C           |  45 |   200
 C           |  70 |    50
 D           |   3 |  2000
(13 行)

# これだと最小の価格が出てこない
shop=# SELECT * FROM (SELECT *, MIN(price) OVER(PARTITION BY customer_id) FROM receipts)t;
 customer_id | seq | price | min
-------------+-----+-------+------
 A           |   1 |   500 |  500
 A           |   2 |  1000 |  500
 A           |   3 |   700 |  500
 B           |   5 |   100 |  100
 B           |   6 |  5000 |  100
 B           |   7 |   300 |  100
 B           |   9 |   200 |  100
 B           |  12 |  1000 |  100
 C           |  10 |   600 |   50
 C           |  20 |   100 |   50
 C           |  45 |   200 |   50
 C           |  70 |    50 |   50
 D           |   3 |  2000 | 2000
(13 行)

# そこでWHEREで条件を加える
shop=# SELECT * FROM (SELECT *, MIN(price) OVER(PARTITION BY customer_id) AS min_price FROM receipts)t WHERE price = min_price;
 customer_id | seq | price | min_price
-------------+-----+-------+-----------
 A           |   1 |   500 |       500
 B           |   5 |   100 |       100
 C           |  70 |    50 |        50
 D           |   3 |  2000 |      2000
(4 行)

# ASの「変数的」な使い方
計算結果に名前を付けて再利用：
sqlSELECT *, MIN(price) OVER(PARTITION BY customer_id) AS min_price
FROM receipts;
-- ↑ min_price という「変数」を作成

-- その「変数」を後で使用
WHERE price = min_price;

# WITHでもいけるけど、2回テーブルにアクセスするから微妙
WITH customer_min_prices AS (
    SELECT *, 
           MIN(price) OVER(PARTITION BY customer_id) AS min_price
    FROM receipts
)
SELECT * FROM customer_min_prices
WHERE price = min_price;

# 最小の枝番を探す
shop=# SELECT * FROM(SELECT *, MIN(seq) OVER(PARTITION BY customer_id) AS min_seq FROM receipts)t WHERE seq = min_seq;
 customer_id | seq | price | min_seq
-------------+-----+-------+---------
 A           |   1 |   500 |       1
 B           |   5 |   100 |       5
 C           |  10 |   600 |      10
 D           |   3 |  2000 |       3
(4 行)

# これ単独でも実行できる（新しいmin_seqという列が追加されていることに注目したい）
shop=# SELECT *, MIN(seq) OVER(PARTITION BY customer_id) AS min_seq FROM receipts;
 customer_id | seq | price | min_seq
-------------+-----+-------+---------
 A           |   1 |   500 |       1
 A           |   2 |  1000 |       1
 A           |   3 |   700 |       1
 B           |   5 |   100 |       5
 B           |   6 |  5000 |       5
 B           |   7 |   300 |       5
 B           |   9 |   200 |       5
 B           |  12 |  1000 |       5
 C           |  10 |   600 |      10
 C           |  20 |   100 |      10
 C           |  45 |   200 |      10
 C           |  70 |    50 |      10
 D           |   3 |  2000 |       3
(13 行)

# 逆に大きいモノを探すこともできる
shop=# SELECT * FROM(SELECT *, MAX(seq) OVER(PARTITION BY customer_id) AS max_seq FROM receipts)t WHERE seq = max_seq;
 customer_id | seq | price | max_seq
-------------+-----+-------+---------
 A           |   3 |   700 |       3
 B           |  12 |  1000 |      12
 C           |  70 |    50 |      70
 D           |   3 |  2000 |       3
(4 行)

# これは全体で3番目が出ちゃう
shop=# SELECT * FROM(SELECT *,ROW_NUMBER() OVER(ORDER BY seq) AS row_num FROM receipts)t WHERE row_num = 3;
 customer_id | seq | price | row_num
-------------+-----+-------+---------
 D           |   3 |  2000 |       3
(1 行)

#  ウィンドウ関数だけで使うとこんなイメージ
shop=# SELECT *, ROW_NUMBER() OVER(ORDER BY seq) FROM receipts;
 customer_id | seq | price | row_number
-------------+-----+-------+------------
 A           |   1 |   500 |          1
 A           |   2 |  1000 |          2
 D           |   3 |  2000 |          3
 A           |   3 |   700 |          4
 B           |   5 |   100 |          5
 B           |   6 |  5000 |          6
 B           |   7 |   300 |          7
 B           |   9 |   200 |          8
 C           |  10 |   600 |          9
 B           |  12 |  1000 |         10
 C           |  20 |   100 |         11
 C           |  45 |   200 |         12
 C           |  70 |    50 |         13
(13 行)

# これなら各項目ごとに3番目が出る
shop=# SELECT * FROM(SELECT *, ROW_NUMBER() OVER(PARTITION BY customer_id ORDER BY seq) AS row_num FROM receipts)t WHERE row_num = 3;
 customer_id | seq | price | row_num
-------------+-----+-------+---------
 A           |   3 |   700 |       3
 B           |   7 |   300 |       3
 C           |  45 |   200 |       3
(3 行)

# 枝番の上から3つを出す
shop=# SELECT * FROM(SELECT *, ROW_NUMBER() OVER(PARTITION BY customer_id ORDER BY seq) AS row_num FROM receipts)t WHERE row_num <= 3;
 customer_id | seq | price | row_num
-------------+-----+-------+---------
 A           |   1 |   500 |       1
 A           |   2 |  1000 |       2
 A           |   3 |   700 |       3
 B           |   5 |   100 |       1
 B           |   6 |  5000 |       2
 B           |   7 |   300 |       3
 C           |  10 |   600 |       1
 C           |  20 |   100 |       2
 C           |  45 |   200 |       3
 D           |   3 |  2000 |       1
(10 行)

# 金額の大きい上から3つを出す
shop=# SELECT * FROM(SELECT *, ROW_NUMBER() OVER(PARTITION BY customer_id ORDER BY price DESC) AS price_rank FROM receipts)t WHERE price_rank <= 3;
 customer_id | seq | price | price_rank
-------------+-----+-------+------------
 A           |   2 |  1000 |          1
 A           |   3 |   700 |          2
 A           |   1 |   500 |          3
 B           |   6 |  5000 |          1
 B           |  12 |  1000 |          2
 B           |   7 |   300 |          3
 C           |  10 |   600 |          1
 C           |  45 |   200 |          2
 C           |  20 |   100 |          3
 D           |   3 |  2000 |          1
(10 行)
