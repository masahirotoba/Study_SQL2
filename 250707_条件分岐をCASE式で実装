# テーブルを作る
shop=# SELECT * FROM elements;
 lvl | color | length | width | hgt
-----+-------+--------+-------+-----
   1 | RED   |      8 |    10 |  12
   2 |       |        |       |  20
   3 |       |      9 |    82 |  25
   4 | BLUE  |        |    67 |
   5 | GRAY  |        |       |
(5 行)

# これでも出せるけど、テーブルに数回アクセスする必要がある
shop=# SELECT
shop-#   (SELECT color FROM Elements WHERE color IS NOT NULL ORDER BY lvl DESC LIMIT 1),
shop-#   (SELECT length FROM Elements WHERE length IS NOT NULL ORDER BY lvl DESC LIMIT 1),
shop-#   (SELECT width FROM Elements WHERE width IS NOT NULL ORDER BY lvl DESC LIMIT 1),
shop-#   (SELECT hgt FROM Elements WHERE hgt IS NOT NULL ORDER BY lvl DESC LIMIT 1);
 color | length | width | hgt
-------+--------+-------+-----
 GRAY  |      9 |    67 |  25
(1 行)

# 実行計画はこれ
 Result  (cost=0.86..0.87 rows=1 width=50)
   InitPlan 1
     ->  Limit  (cost=0.15..0.21 rows=1 width=42)
           ->  Index Scan Backward using pk_elements on elements  (cost=0.15..63.00 rows=985 width=42)
                 Filter: (color IS NOT NULL)
   InitPlan 2
     ->  Limit  (cost=0.15..0.21 rows=1 width=8)
           ->  Index Scan Backward using pk_elements on elements elements_1  (cost=0.15..63.00 rows=985 width=8)
                 Filter: (length IS NOT NULL)
   InitPlan 3
     ->  Limit  (cost=0.15..0.21 rows=1 width=8)
           ->  Index Scan Backward using pk_elements on elements elements_2  (cost=0.15..63.00 rows=985 width=8)
                 Filter: (width IS NOT NULL)
   InitPlan 4
     ->  Limit  (cost=0.15..0.21 rows=1 width=8)
           ->  Index Scan Backward using pk_elements on elements elements_3  (cost=0.15..63.00 rows=985 width=8)
                 Filter: (hgt IS NOT NULL)
(17 行)

# 本当はIGNORE NULLs関数を使えるのが望ましい
SELECT MAX(color_max),
       MAX(length_max),
       MAX(width_max),
       MAX(hgt_max)
  FROM (SELECT FIRST_VALUE(color)  IGNORE NULLS OVER(ORDER BY lvl DESC) color_max,
               FIRST_VALUE(length) IGNORE NULLS OVER(ORDER BY lvl DESC) length_max,
               FIRST_VALUE(width)  IGNORE NULLS OVER(ORDER BY lvl DESC) width_max,
               FIRST_VALUE(hgt)    IGNORE NULLS OVER(ORDER BY lvl DESC) hgt_max
          FROM Elements) TMP;

# ピザの売上テーブル
shop=# SELECT * FROM pizzasales;
 customer_id | sale_date  | sales_amt
-------------+------------+-----------
           1 | 2024-04-01 |       500
           1 | 2024-04-23 |      1200
           1 | 2024-05-29 |      1700
           1 | 2024-06-01 |       400
           1 | 2024-06-30 |      8000
           2 | 2023-12-30 |      1000
           2 | 2024-01-10 |       800
           2 | 2024-02-25 |       500
           2 | 2024-04-13 |      1300
           2 | 2024-05-08 |       900
           3 | 2023-10-08 |       700
           3 | 2023-11-22 |       500
(12 行)

# 日付の型を指定しないとエラーになる
shop=# SELECT customer_id, sale_date, sales_amt FROM pizzasales
shop-# WHERE sale_date BETWEEN '2024-6-30' - INTERVAL '30' DAY AND '2024-6-30';
ERROR:  "interval"型の入力構文が不正です: "2024-6-30"
行 2: WHERE sale_date BETWEEN '2024-6-30' - INTERVAL '30' DAY AND ...
                              ^

# 正しいINTERVALの使い方
DATE '2024-6-30' - INTERVAL '30' DAY
DATE '2024-6-30' - INTERVAL '2' MONTH  
DATE '2024-6-30' - INTERVAL '1' YEAR

# 日付計算
-- 30日前
SELECT CURRENT_DATE - INTERVAL '30' DAY;
-- 結果: 2025-06-07（今日が2025-07-07の場合）

-- 3ヶ月後
SELECT CURRENT_DATE + INTERVAL '3' MONTH;
-- 結果: 2025-10-07

-- 2週間前
SELECT CURRENT_DATE - INTERVAL '2' WEEK;
-- 結果: 2025-06-23

# これでも動く
shop=# SELECT customer_id, sale_date, sales_amt FROM pizzasales
shop-# WHERE sale_date BETWEEN '2024-05-31' AND '2024-06-30';
 customer_id | sale_date  | sales_amt
-------------+------------+-----------
           1 | 2024-06-01 |       400
           1 | 2024-06-30 |      8000
(2 行)

# DATEの型を片方指定しなかった
shop=# SELECT customer_id, sale_date, sales_amt FROM pizzasales
shop-# WHERE sale_date BETWEEN DATE '2024-6-30' - INTERVAL '30' DAY AND '2024-6-30';
 customer_id | sale_date  | sales_amt
-------------+------------+-----------
           1 | 2024-06-01 |       400
           1 | 2024-06-30 |      8000
(2 行)

# 顧客ごとの合計を求める
shop=# SELECT customer_id, SUM(sales_amt) FROM pizzasales GROUP BY customer_id ORDER BY customer_id;
 customer_id |  sum
-------------+-------
           1 | 11800
           2 |  4500
           3 |  1200
(3 行)

# WHEREは使わない（テーブルへのアクセスが増えるから）
# まずはシンプルな基本形で書いてみる
shop=# SELECT customer_id,
shop-# SUM(CASE WHEN sale_date BETWEEN DATE '2024-6-30' - INTERVAL '30' DAY AND DATE '2024-6-30' THEN sales_amt ELSE 0 END) AS "0~30日前"
shop-# FROM pizzasales GROUP BY customer_id ORDER BY customer_id;
 customer_id | 0~30日前
-------------+----------
           1 |     8400
           2 |        0
           3 |        0
(3 行)

# 日付の計算をする限り、INTERVALは必ず必要
→数値とごっちゃになってしまうから
-- これだと「30って何？」状態
DATE '2024-6-30' - 30

-- コンピューターの混乱：
-- 「30円を引くの？」
-- 「30%を引くの？」  
-- 「30日を引くの？」
-- 「30時間を引くの？」

# WHEREではなく、CASEで分岐させる
shop=# SELECT customer_id,
shop-# SUM(CASE WHEN sale_date BETWEEN DATE '2024-6-30' - INTERVAL '30' DAY AND DATE '2024-6-30' THEN sales_amt ELSE 0 END) AS "30日前の売上",
shop-# SUM(CASE WHEN sale_date BETWEEN DATE '2024-6-30' - INTERVAL '60' DAY AND DATE '2024-6-30' - INTERVAL '31' DAY THEN sales_amt ELSE 0 END) AS "31~60日前の売上",
shop-# SUM(CASE WHEN sale_date BETWEEN DATE '2024-6-30' - INTERVAL '90' DAY AND DATE '2024-6-30' - INTERVAL '61' DAY THEN sales_amt ELSE 0 END) AS "61~90日前の売上",
shop-# SUM(CASE WHEN sale_date < DATE '2024-6-30' - INTERVAL '91' DAY THEN sales_amt ELSE 0 END) AS "91日以降の売上"
shop-# FROM pizzasales GROUP BY customer_id ORDER BY customer_id;
 customer_id | 30日前の売上 | 31~60日前の売上 | 61~90日前の売上 | 91日以降の売上
-------------+--------------+-----------------+-----------------+----------------
           1 |         8400 |            1700 |            1700 |              0
           2 |            0 |             900 |            1300 |           2300
           3 |            0 |               0 |               0 |           1200
(3 行)

